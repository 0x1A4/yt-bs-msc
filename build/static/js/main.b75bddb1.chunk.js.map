{"version":3,"sources":["features/header/model/header.store.ts","features/common/lib/fetching.ts","features/header/model/header.events.ts","features/header/atoms/account-selector.tsx","features/header/atoms/client-selector.tsx","features/header/molecules/account-client-selector.tsx","features/common/model/config.store.ts","features/common/lib/request.ts","features/accounts/api.ts","features/common/lib/Info.enum.ts","features/clients/api.ts","features/header/model/header.model.ts","features/header/molecules/header-tabs.tsx","features/header/ogranisms/Header.tsx","features/settings/model/settings.store.ts","features/settings/model/settings.events.ts","features/common/atoms/field.tsx","features/settings/atoms/account.tsx","features/templates/api.ts","features/tokens/api.ts","features/settings/model/settings.model.ts","features/settings/molecules/accounts-panel.tsx","features/settings/atoms/client.tsx","features/settings/molecules/clients-panel.tsx","serviceWorker.ts","index.tsx","App.tsx"],"names":["$headerAccounts","createStore","$selectedHeaderAccount","$headerClients","$selectedHeaderClient","$isClientSelected","map","_","createFetching","createStoreObject","account","client","effect","initialStatus","arguments","length","undefined","_ref","_ref$result","result","iresult","_ref$error","error","ierror","_ref$reset","reset","createEvent","fail","on","done","value","status","isDone","state","isFailed","isLoading","loadAccounts","accountsProcessing","createEffect","accountsFetching","accountChanged","loadClients","clientsProcessing","clientsFetching","clientChanged","changeHeaderTab","AccountSelector","notificationSystem","accounts","useStore","react_default","a","createElement","Fragment","Menu","Item","Dropdown","placeholder","search","selection","options","key","id","text","environment","concat","name","loading","onChange","event","data","ClientSelector","clients","AccountClientSelector","account_selector_AccountSelector","client_selector_ClientSelector","$baseUri","request","Object","asyncToGenerator","regenerator_default","mark","_callee","method","url","baseUri","headers","uri","restOptions","config","_args","wrap","_context","prev","next","getState","objectSpread","createContentType","body","objectWithoutProperties","transformHeaders","createBody","abrupt","fetch","then","response","parse","contentType","get","includes","json","responseToPromise","TypeError","stop","_x","_x2","apply","this","header","contentTypeFromOptions","Content-Type","FormData","keys","h","JSON","stringify","ok","Promise","resolve","reject","okToPromise","Info","accountsApi","info","clientsApi","accountId","watch","use","SIMPLE","payload","HeaderTabs","isEnabled","t","onClick","position","content","Icon","size","disabled","Header","useRef","account_client_selector_AccountClientSelector","header_tabs_HeaderTabs","NotificationSystem_default","ref","$accounts","$clients","$templates","$selectedSettingsTab","$selectedAccount","$selectedClient","$selectedTemplate","$currentClientTokens","selectSettingsTab","loadAllClients","allClientsProcessing","selectClient","loadAllAccounts","allAccountsProcessing","selectAccount","loadAllTemplates","allTemplatesProcessing","selectTemplate","getToken","getTokenProcessing","generateToken","generateTokenProcessing","updateToken","updateTokenProcessing","Field","field","input","changeField","type","commonjs","dateFormat","iconPosition","style","width","active","fluid","Input","label","Grid","Row","Column","Account","isActive","fields","Segment","Accordion","Title","index","Content","verticalAlign","f","field_Field","templatesApi","tokensApi","clientId","tokenId","DETAILED","tokens","console","log","params","isValid","templates","AccountsPanel","acc","account_Account","Client","accOptions","desc","mtName","tokensLeft","currentClientTokens","Token","_ref2","token","color","Button","GridColumn","textAlign","icon","ClientsPanel","cl","client_Client","Boolean","window","location","hostname","match","ReactDOM","render","Header_Header","accounts_panel_AccountsPanel","clients_panel_ClientsPanel","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b75bddb1.chunk.js","sourcesContent":["import { createStore, createStoreObject } from 'effector';\n\nexport interface SimpleAccount {\n  id: number;\n  name: string;\n  environment: 'dev' | 'prod';\n}\nexport interface SimpleClient {\n  id: number;\n  name: string;\n}\n\nexport const $headerAccounts = createStore<SimpleAccount[]>([]);\nexport const $selectedHeaderAccount = createStore<number>(-1);\n\nexport const $headerClients = createStore<SimpleClient[]>([]);\nexport const $selectedHeaderClient = createStore<number>(-1);\nexport const $isClientSelected = $selectedHeaderClient.map(_ => _ !== -1);\n\nexport const $current = createStoreObject({\n  account: $selectedHeaderAccount,\n  client: $selectedHeaderClient,\n});\n\nexport const $selectedTab = createStore<number>(-1);\n","import { createStore, createEvent, Effect } from 'effector';\n/*import {notificationSystem} from '../../accounts/ogranisms/HeaderAccount'\nimport {Notification} from 'react-notification-system';*/\n\nexport const createRequestState = (effect: Effect<any,any,any>, initial = false) =>\n  createStore(initial)\n    .on(effect, () => true)\n    .on(effect.done, () => false)\n    .on(effect.fail, () => false);\n\n/**\n * @param {'initial'|'loading'|'done'|'fail'} initialStatus\n */\nexport const createFetching = (\n  effect: Effect<any,any,any>,\n  initialStatus = 'initial',\n  { result: iresult = null, error: ierror = null, reset = createEvent() } = {},\n) => {\n  const result = createStore(iresult)\n    .reset(effect)\n    .reset(effect.fail)\n    .reset(reset)\n\n    .on(effect.done, (_, value: {params: any, result: any}) => {\n      return value.result;\n    });\n\n  const error = createStore(ierror)\n    .reset(effect)\n    .reset(effect.done)\n    .reset(reset)\n    .on(effect.fail, (_, value: {params: any, error: any}) => value.error);\n\n  const status = createStore(initialStatus)\n    .on(effect, () => 'loading')\n    .on(effect.done, () => 'done')\n    .on(effect.fail, () => 'fail')\n    .reset(reset);\n\n  const isDone = status.map(state => state === 'done');\n  const isFailed = status.map(state => state === 'fail');\n  const isLoading = status.map(state => state === 'loading');\n\n  return { status, result, error, isDone, isFailed, isLoading };\n};\n","import { createFetching } from \"../../common/lib/fetching\"\nimport { createEvent, createEffect } from 'effector';\n\n/*\nload[] - initial load event;\n[]processing - effect for use and done/fail hooks;\n[]fetching - processing effect result and status;\n[]changed - getting payload onChange;\n */\n\n\n/*\n  SIMPLE ACCOUNTS\n*/\nexport const loadAccounts =  createEvent();\nexport const accountsProcessing = createEffect<void,any,any>();\nexport const accountsFetching = createFetching(accountsProcessing);\nexport const accountChanged = createEvent<any>();\n\n\n/*\n  SIMPLE CLIENTS\n */\nexport const loadClients = createEvent();\nexport const clientsProcessing = createEffect<number, any, any>();\nexport const clientsFetching = createFetching(clientsProcessing);\nexport const clientChanged = createEvent<any>();\n\n/*\n  HEADER TABS\n */\n\nexport const changeHeaderTab = createEvent<number>();\n","import React, { FC } from 'react';\nimport { System, Notification } from 'react-notification-system';\nimport { Dropdown, Menu } from 'semantic-ui-react';\nimport { useStore } from 'effector-react';\nimport { $headerAccounts } from '../model/header.store';\nimport { accountChanged, accountsFetching } from '../model/header.events';\n\nexport const AccountSelector: FC<any> = ({ notificationSystem }: { notificationSystem: System }) => {\n  /*  const selectAccount = createEvent();\n  $currentAccount.on(selectAccount, (state, payload) => payload );\n  const accounts = createStore([] as HeaderAccount[])\n    .on(getAccounts.done, (oldState: any, payload: any) =>payload.result.accounts)\n    .on(getAccounts.fail, (state: any, payload: any) => {\n      //@ts-ignore\n      notificationSystem.current.addNotification({\n        message: payload.error.message,\n        level: 'error',\n        position: 'br'\n      } as Notification);\n    });*/\n\n  /*  selectAccount.watch((a)=>console.log(a));*/\n  /*  accounts.map(account => ({\n    key: account.id,\n    value: account.id,\n    text: account.environment==='dev'? `dev:${account.name}`: account.name,\n  }))*/\n  /*  const AccountsDropdown =  createComponent(accounts, ((props, accounts) =>\n    <>\n    <Dropdown\n    placeholder=\"Select an account\"\n    search\n    selection\n    options={accounts.map(account=>({\n      key: account.id,\n      value: account.id,\n      text: account.environment==='dev' ? `dev:${account.name}`: account.name,\n    }))}\n    onChange={(event, data) => {\n      //@ts-ignore\n      selectAccount(data.value);\n    }}\n  />\n  </>));*/\n  const accounts = useStore($headerAccounts);\n  const isLoading = useStore(accountsFetching.isLoading);\n  const isError = useStore(accountsFetching.isFailed);\n/*  if(isError){\n    //@ts-ignore\n      notificationSystem.current.addNotification({\n        message: 'error',\n        level: 'error',\n        position: 'br'\n      } as Notification);\n  }*/\n  return (\n    <>\n      <Menu.Item>\n        <Dropdown\n          placeholder=\"Select an account\"\n          search\n          selection\n          options={accounts.map(account => ({\n            key: account.id,\n            value: account.id,\n            text: account.environment === 'dev' ? `dev:${account.name}` : account.name,\n          }))}\n          loading={isLoading}\n          onChange={(event, data) => accountChanged(data.value)}\n        />\n      </Menu.Item>\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport { System } from 'react-notification-system';\nimport { Dropdown, Menu } from 'semantic-ui-react';\nimport { useStore } from 'effector-react';\nimport { $headerClients } from '../model/header.store';\nimport { clientChanged, clientsFetching } from '../model/header.events';\n\nexport const ClientSelector: FC<any> = ({ notificationSystem }: { notificationSystem: System }) => {\n  const clients = useStore($headerClients);\n  const isLoading = useStore(clientsFetching.isLoading);\n  return (\n    <>\n      <Menu.Item>\n        <Dropdown\n          placeholder=\"Select an account\"\n          search\n          selection\n          options={clients.map(client => ({\n            key: client.id,\n            value: client.id,\n            text: client.name,\n          }))}\n          loading={isLoading}\n          onChange={(event, data) => clientChanged(data.value)}\n        />\n      </Menu.Item>\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport { ClientSelector, AccountSelector } from '../atoms';\nexport const AccountClientSelector: FC = () => {\n  return (\n    <>\n      <AccountSelector />\n      <ClientSelector />\n    </>\n  );\n};\n","import {createStore} from 'effector'\n\nexport const $baseUri = createStore<string>(\"http://localhost:3001\");\n","import { $baseUri } from '../model/config.store';\n/*import { $token } from \"../model/token\"*/\n\ntype Method = 'GET' | 'POST' | 'PUT' | 'DELETE';\n\ninterface Options {\n  headers?: { [key: string]: string };\n  parse?: 'text' | 'json' | 'noparse';\n  baseUri?: string;\n  body?: string | FormData | any;\n}\n\n/**\n * @param {\"GET\"|\"POST\"|\"PUT\"|\"DELETE\"} method\n * @param {string} url\n * @param {{ headers?: {}, body?: {}, parse?: 'text' | 'json' | 'noparse', baseUri?: string }} options\n */\nexport const request = async (method: Method, url: string, options: Options = {}) => {\n  const baseUri = $baseUri.getState();\n  /*  const token = $token.getState()*/\n\n  const headers = {\n    ...createContentType(options),\n    /*    ...createAuthorization(token),*/\n    ...options.headers,\n  };\n\n  const uri = `${options.baseUri || baseUri}${url}`;\n  const { body, ...restOptions } = options;\n\n  const config = {\n    method,\n    // @ts-ignore\n    headers: transformHeaders(headers),\n    ...restOptions,\n    body: createBody(options, headers),\n    uri,\n  };\n\n  if (process.env.NODE_ENV === 'development') {\n    logRequest(config);\n  }\n\n  return fetch(uri, config).then(response => {\n    if (options.parse === 'text') {\n      return response.text();\n    }\n    if (options.parse === 'noparse') {\n      return response;\n    }\n    const contentType = response.headers.get('Content-Type');\n    if (contentType && contentType.includes('json')) {\n      return response.json().then(responseToPromise, responseToPromise);\n    }\n    throw new TypeError('Unexpected content-type');\n  });\n};\n\nconst createContentType = (options: Options) => {\n  const header = contentTypeFromOptions(options);\n  return header ? { 'Content-Type': header } : {};\n};\n\n/*const createAuthorization = (token?: string) =>\ntoken ? { Authorization: `bearer ${token}` } : {}\n*/\nconst contentTypeFromOptions = (options: Options) => {\n  if (options && options.headers && options.headers['Content-Type']) {\n    return options.headers['Content-Type'];\n  }\n\n  if (options && options.body && options.body instanceof FormData) {\n    return 'multipart/form-data';\n  }\n\n  if (typeof options.body === 'object') {\n    return 'application/json';\n  }\n  return (options.headers && options.headers['Content-Type']) || '';\n  /*  return typeof options.body === 'object'\n    ? 'application/json'\n    : (options.headers && options.headers['Content-Type']);*/\n};\nconst transformHeaders = (headers: { [key: string]: string }) => {\n  return Object.keys(headers).map(h => [h, headers[h]]);\n};\n/**\n * @param {{ body?: {} }} options\n * @param {Headers} headers\n */\nconst createBody = (options: any, headers: any): FormData | string | null => {\n  const contentType = headers['Content-Type'];\n  if (options.body && contentType && contentType.includes('json')) {\n    return JSON.stringify(options.body);\n  }\n  if (options.body instanceof FormData) {\n    return options.body;\n  }\n  return null;\n};\n\n/**\n * @param {Request} requestConfig\n */\nconst logRequest = (requestConfig: any) => {\n  if (localStorage.getItem('api-debug')) {\n    /* eslint-disable no-console */\n    console.groupCollapsed(`API >> ${requestConfig.method} ${requestConfig.uri}`);\n    console.log('request:', requestConfig);\n    console.groupEnd();\n    /* eslint-enable no-console */\n  }\n};\n\ntype ResponseOk<R> = {\n  ok: true;\n  result: R;\n};\n\ntype ResponseError<E> = {\n  ok: false;\n  error: E;\n};\n\ntype CustomResponse<R, E> = ResponseOk<R> | ResponseError<E>;\n\n// TODO: remove any (typed contracts?)\nfunction responseToPromise<R, E>(response: CustomResponse<R, E>) {\n  return response ? okToPromise(response) : response;\n}\n\nfunction okToPromise<R, E>(response: CustomResponse<R, E>): Promise<R> {\n  return response.ok ? Promise.resolve(response.result) : Promise.reject(response.error);\n}\n","import { request } from '../common/lib/request';\nimport { Info } from '../common/lib/Info.enum';\n\n\nconst getAccounts = (info: Info) => request(`GET`, `/accounts?info=${info}`, { parse: 'json' });\nconst getAccountById = (id: number) => request(`GET`, `/accounts/${id}`);\n\nexport const accountsApi = {\n  getAccounts,\n  getAccountById,\n};\n","export enum Info {\n  SIMPLE = 'simple',\n  DETAILED = 'detailed',\n}\n","import { request } from '../common/lib/request'\nimport { Info } from '../common/lib/Info.enum';\n\n\nconst getClientsByAccountId = (accountId: number) => request(\"GET\", `/clients?account=${accountId}`);\nconst getClients = (info: Info) => request(\"GET\", `/clients?info=${info}`);\nconst getClient = (id: number) => request(\"GET\", `/clients/${id}`);\nexport const clientsApi = {\n  getClients,\n  getClientsByAccountId,\n  getClient,\n};\n","import { $headerAccounts, $headerClients, $selectedHeaderAccount, $selectedHeaderClient } from './header.store';\nimport {\n  accountChanged,\n  accountsProcessing,\n  clientChanged,\n  clientsProcessing,\n  loadAccounts,\n  loadClients,\n} from './header.events';\nimport { accountsApi } from '../../accounts/api';\nimport { clientsApi } from '../../clients/api';\nimport { Info } from '../../common/lib/Info.enum';\n/*\nHeaderAccount Selector Lifecycle\n */\nloadAccounts.watch(() => accountsProcessing());\naccountsProcessing.use(() => accountsApi.getAccounts(Info.SIMPLE));\n$headerAccounts.on(accountsProcessing.done, (state, payload) => payload.result.accounts);\n$selectedHeaderAccount.on(accountChanged, (_, account) => {\n  loadClients(account);\n  return account;\n});\n\n/*\nClient Selector Lifecycle\n */\nloadClients.watch((payload: any) => clientsProcessing(payload));\nclientsProcessing.use(payload => clientsApi.getClientsByAccountId(payload));\n$headerClients.on(clientsProcessing.done, (state, payload) => payload.result.clients);\n$selectedHeaderClient.on(clientChanged, (_, client) => client);\n\n","import React, { FC } from 'react';\nimport { Icon, Menu } from 'semantic-ui-react';\nimport { changeHeaderTab } from '../model/header.events';\nimport { useStore } from 'effector-react';\nimport { $isClientSelected } from '../model/header.store';\nexport const HeaderTabs: FC = () => {\n  const tabs = [\n    { id: 0, name: 'TEMPLATES', text: 'Templates' },\n    { id: 1, name: 'CAMPAIGNS', text: 'Campaigns' },\n    { id: 99, name: 'SETTINGS', text: 'Settings' },\n  ];\n  const isEnabled = useStore($isClientSelected);\n  return (\n    <>\n      {tabs.map(t => (\n        <Menu.Item\n          key={t.id}\n          name={t.name}\n          onClick={() => changeHeaderTab(t.id)}\n          position={t.id !== 99 ? undefined : 'right'}\n          content={t.id !== 99 ? t.text : <Icon name={'cogs'} size={'large'} />}\n          disabled={t.id!==99&&!isEnabled}\n        />\n      ))}\n    </>\n  );\n};\n","import React, { FC, useRef } from 'react';\nimport { AccountClientSelector } from '../molecules/account-client-selector';\nimport '../model';\nimport { loadAccounts } from '../model/header.events';\nimport { HeaderTabs } from '../molecules/header-tabs';\nimport { Menu } from 'semantic-ui-react';\nimport NotificationSystem from 'react-notification-system';\nexport const Header: FC = () => {\n  const notificationSystem = useRef(null);\n  loadAccounts();\n  return (\n    <>\n      <Menu>\n        <AccountClientSelector/>\n        <HeaderTabs/>\n      </Menu>\n      <NotificationSystem ref={notificationSystem} />\n    </>\n  );\n};\n","import { SimpleAccount, SimpleClient } from '../../header/model/header.store';\nimport { createStore } from 'effector';\nexport interface Account extends SimpleAccount{\n  clientId: string,\n  clientSecret: string,\n}\nexport interface Client extends SimpleClient{\n  account: Account,\n  accountId: number,\n  tokensLeft: number,\n  tokens: Token[]|[],\n  mtName: string,\n  desc: string,\n\n}\nexport interface Token {\n  id: number,\n  accessToken: string,\n  refreshToken: string,\n  isValid: boolean,\n  expires: number,\n  client: Client,\n  clientId: number,\n}\nexport interface Template {\n  id: number;\n  autobiddingMode: string,\n  budgetLimitDay: number;\n  budgetLimit: number;\n  mixing: string;\n  price: number;\n  ageRestrictions: string;\n  showsLimit: number;\n  bannerUniqShowsLimit: number;\n  uniqShowsPeriod: string;\n  uniqShowsLimit: number;\n  enableUtm: boolean;\n  packageId: number;\n  campaignName?: string;\n  templateName?: string;\n  dateRange?: string;\n  clientId: number;\n  client: Client,\n}\n\nexport const $accounts = createStore<Account[]>([]);\nexport const $clients = createStore<Client[]>([]);\nexport const $templates = createStore<Template[]>([]);\nexport const $selectedSettingsTab = createStore<number>(-1);\nexport const $selectedAccount = createStore<number>(-1);\nexport const $selectedClient = createStore<number>(-1);\nexport const $selectedTemplate = createStore<number>(-1);\nexport const $currentClientTokens = createStore<any[]>([]);\n","import { createEffect, createEvent } from 'effector';\nimport { createFetching } from '../../common/lib/fetching';\nimport { tokensApi } from '../../tokens/api';\n\n/*\n  SETTINGS TAB\n */\nexport const selectSettingsTab = createEvent<number>();\n\n/*\n  CLIENTS\n */\nexport const loadAllClients = createEvent();\nexport const allClientsProcessing = createEffect<void, any, any>();\nexport const allClientsFetching = createFetching(allClientsProcessing);\nexport const selectClient = createEvent<number>();\n\n/*\n  ACOOUNTS\n */\nexport const loadAllAccounts = createEvent();\nexport const allAccountsProcessing = createEffect<void, any, any>();\nexport const allAccountsFetching = createFetching(allAccountsProcessing);\nexport const selectAccount = createEvent<number>();\n\n/*\n  TEMPLATES\n */\nexport const loadAllTemplates = createEvent();\nexport const allTemplatesProcessing = createEffect<void, any, any>();\nexport const allTemplatesFetching = createFetching(allTemplatesProcessing);\nexport const selectTemplate = createEvent<number>();\n\n/*\n  TOKEN\n */\n\nexport const getToken = createEvent<number>();\nexport const getTokenProcessing = createEffect<number,any,any>();\nexport const getTokenFetching = createFetching(getTokenProcessing);\n\nexport const generateToken = createEvent<number>();\nexport const generateTokenProcessing = createEffect<number,any,any>();\nexport const generateTokenFetching = createFetching(generateTokenProcessing);\n\nexport const updateToken = createEvent<number>();\nexport const updateTokenProcessing = createEffect<number,any,any>();\nexport const updateTokenFetching = createFetching(updateTokenProcessing);\n","import React, { FC } from 'react';\nimport { DatesRangeInput } from 'semantic-ui-calendar-react';\nimport { Dropdown, Grid, Input } from 'semantic-ui-react';\n\nexport const Field: FC<any> = ({ field, changeField }) => {\n  let input = null;\n  switch (field.type) {\n    case 'date':\n      input = (\n        <DatesRangeInput\n          name=\"datesRange\"\n          dateFormat=\"YYYY-MM-DD\"\n          placeholder=\"From - To (optional)\"\n          value={field.value}\n          iconPosition=\"left\"\n          style={{ width: '100%' }}\n          onChange={()=>null}\n          disabled={!field.active}\n/*          onChange={(e, data) => {\n            changeField(field.key, data.value);\n          }}*/\n        />\n      );\n      break;\n    case 'dropdown':\n      input = (\n        <Dropdown\n          placeholder={field.text}\n          fluid\n          search\n          selection\n          value={field.value}\n          options={field.options}\n          disabled={!field.active}\n          /*          onChange={(event1, data) =>{\n                      changeField(field.key, data.value);\n                    }}*/\n        />\n      );\n      break;\n    case 'input':\n      input = (\n        <Input\n          fluid\n          value={field.value}\n          placeholder={field.label}\n          disabled={!field.active}\n          /*          onChange={(ev, data) => changeField(field.key, data.value)}*/\n        />\n      );\n      break;\n    default:\n      break;\n  }\n  return (\n    <Grid.Row>\n      <Grid.Column width={4}>\n        <label>{`${field.label}:`}</label>\n      </Grid.Column>\n      <Grid.Column width={12}>{input}</Grid.Column>\n    </Grid.Row>\n  );\n};\n","import React, { FC } from 'react';\nimport { Accordion, Icon, Grid, Button, Label, Input, Segment, Dropdown } from 'semantic-ui-react';\nimport { useStore } from 'effector-react';\nimport { $selectedAccount, Account as AccountInterface } from '../model/settings.store';\nimport { selectAccount } from '../model/settings.events';\nimport {Field as FieldComponent} from '../../common/atoms/field';\n\nexport interface Field<T>{\n  key: string|number;\n  label: string;\n  type: 'input' | 'dropdown' | 'date';\n  value: string|number|T;\n  active?: boolean;\n  options?: DropdownOption<T>[];\n}\nexport interface DropdownOption<T> {\n  key: number,\n  text: string,\n  value: T,\n}\n\nexport const Account: FC<any> = ({ account }: { account: AccountInterface }) => {\n /* const envOptions = [{ key: 1, text: 'Development', value: 'dev' }, { key: 2, text: 'Production', value: 'prod' }];*/\n  const selectedAccount = useStore($selectedAccount);\n  const isActive = selectedAccount === account.id;\n  const fields: Field<'dev'|'prod'>[] = [\n    { key: 'name', label: 'Account name', value: account.name, type: 'input'},\n    { key: 'environment', label: 'Environment', value: account.environment, type: 'dropdown', options: [{ key: 1, text: 'Development', value: 'dev' }, { key: 2, text: 'Production', value: 'prod' }]},\n  ];\n  return (\n    <>\n      <Segment>\n        <Accordion.Title\n          active={isActive}\n          index={account.id}\n          onClick={() => selectAccount(isActive ? -1 : account.id)}\n        >\n          <Icon name=\"dropdown\" />\n          {account.name}\n        </Accordion.Title>\n        <Accordion.Content active={isActive}>\n          <Grid verticalAlign={'middle'}>\n            {fields.map(f=><FieldComponent key={f.key} field={f}/>)}\n          </Grid>\n        </Accordion.Content>\n      </Segment>\n    </>\n  );\n};\n","import { request } from '../common/lib/request';\n\nconst getTemplates = () => request('GET', `/templates`);\n  export const templatesApi = {\n  getTemplates,\n}\n","import { request } from '../common/lib/request'\n\n\nconst generateClientToken = (clientId: number) => request(\"POST\", `/tokens`, {body: {client: clientId}});\nconst getClientTokens = (clientId: number) => request('GET', `/tokens?client=${clientId}`);\nconst updateToken = (tokenId: number) => request('PUT', `/tokens/${tokenId}`);\n\nexport const tokensApi = {\n  generateClientToken,\n  getClientTokens,\n  updateToken,\n};\n","import {\n  allAccountsProcessing,\n  allClientsProcessing,\n  allTemplatesProcessing,\n  generateToken,\n  generateTokenProcessing,\n  getToken,\n  getTokenFetching,\n  getTokenProcessing,\n  loadAllAccounts,\n  loadAllClients,\n  loadAllTemplates,\n  selectAccount,\n  selectClient,\n  selectSettingsTab,\n  selectTemplate, updateToken, updateTokenProcessing,\n} from './settings.events';\nimport { accountsApi } from '../../accounts/api';\nimport { clientsApi } from '../../clients/api';\nimport { Info } from '../../common/lib/Info.enum';\nimport {\n  $accounts,\n  $clients, $currentClientTokens,\n  $selectedAccount,\n  $selectedClient,\n  $selectedSettingsTab, $selectedTemplate,\n  $templates,\n} from './settings.store';\nimport { templatesApi } from '../../templates/api';\nimport { tokensApi } from '../../tokens/api';\n\n\n$selectedSettingsTab.on(selectSettingsTab, (state, payload) => payload);\n\nloadAllClients.watch(()=>allClientsProcessing());\nallClientsProcessing.use(()=>clientsApi.getClients(Info.DETAILED));\n$clients.on(allClientsProcessing.done,(state, payload)=>payload.result.clients);\n$selectedClient.on(selectClient, (state, payload) => payload);\n\n\ngetToken.watch((clientId:number) => getTokenProcessing(clientId));\ngetTokenProcessing.use((clientId: number) => tokensApi.getClientTokens(clientId));\n$currentClientTokens.on(getTokenProcessing.done, (state, payload) => payload.result.tokens);\ngetTokenProcessing.done.watch(payload => console.log(payload));\ngetTokenProcessing.fail.watch(payload => console.log(payload));\n\ngenerateToken.watch((clientId: number)=>generateTokenProcessing(clientId));\ngenerateTokenProcessing.use((clientId)=>tokensApi.generateClientToken(clientId));\ngenerateTokenProcessing.done.watch(payload => {\n  console.log(payload);\n  getToken(payload.params);\n});\ngenerateTokenProcessing.fail.watch(payload => console.log(payload));\n\nupdateToken.watch((tokenId: number)=>updateTokenProcessing(tokenId));\nupdateTokenProcessing.use((tokenId: number)=>tokensApi.updateToken(tokenId));\n$currentClientTokens.on(updateTokenProcessing.done, (state, payload) => state.map(t=>t.id===payload.params? {...t,...{isValid: true}}: t));\nupdateTokenProcessing.done.watch(payload => {\n  console.log(payload);\n});\nupdateTokenProcessing.fail.watch(payload => console.log(payload));\n\n\nloadAllAccounts.watch(()=>allAccountsProcessing());\nallAccountsProcessing.use(()=>accountsApi.getAccounts(Info.DETAILED));\n$accounts.on(allAccountsProcessing.done, (state, payload) => payload.result.accounts);\n$selectedAccount.on(selectAccount,(state, payload) => payload);\n\nloadAllTemplates.watch(()=>allTemplatesProcessing());\nallTemplatesProcessing.use(()=>templatesApi.getTemplates());\n$templates.on(allTemplatesProcessing.done, (state, payload) => payload.result.templates);\n$selectedTemplate.on(selectTemplate, (state, payload) => payload);\n","import React, { FC } from 'react';\nimport {Account} from '../atoms/account';\nimport { useStore } from 'effector-react';\nimport { $accounts } from '../model/settings.store';\nimport { Accordion } from 'semantic-ui-react';\nimport '../model/settings.model';\nexport const AccountsPanel: FC = () => {\n  const accounts = useStore($accounts);\n  return (\n    <Accordion>\n      {accounts.map(acc=><Account key={acc.id} account={acc}/>)}\n    </Accordion>\n  );\n};\n","import React, { FC } from 'react';\nimport { Accordion, Button, Grid, GridColumn, Icon, Segment } from 'semantic-ui-react';\nimport { generateToken, getToken, selectClient, updateToken } from '../model/settings.events';\nimport { useStore } from 'effector-react';\nimport {\n  $accounts,\n  $currentClientTokens,\n  $selectedClient,\n  Client as ClientInterface,\n  Token,\n} from '../model/settings.store';\nimport { Field } from './account';\nimport { Field as FieldComponent } from '../../common/atoms/field';\nexport const Client: FC<any> = ({ client }: { client: ClientInterface }) => {\n  const selectedClient = useStore($selectedClient);\n  const isActive = selectedClient === client.id;\n  const accounts = useStore($accounts);\n  const accOptions = accounts.map(acc => ({ key: acc.id, text: acc.name, value: acc.id }));\n  const fields: Field<number>[] = [\n    { key: 'name', label: 'Client name', value: client.name, type: 'input', active: true },\n    { key: 'desc', label: 'Description', value: client.desc, type: 'input', active: true },\n    {\n      key: 'accountId',\n      label: 'MT Agency account',\n      value: client.accountId,\n      type: 'dropdown',\n      options: accOptions,\n      active: true,\n    },\n    { key: 'mtName', label: 'MT client name', value: client.mtName, type: 'input', active: true },\n    { key: 'tokensLeft', label: 'Tokens left', value: client.tokensLeft, type: 'input', active: true },\n  ];\n  if (isActive) {\n    /*    getToken(client.id)\n     *  token.isValid? '#FFFFFF' : '#FF0000'*/\n  }\n  const currentClientTokens = useStore($currentClientTokens);\n  const Token: FC<any> = ({ token }: { token: Token }) => (\n    <Grid.Row>\n      <Grid.Column width={4}>\n        <label>{`Token #${token.id}:`}</label>\n      </Grid.Column>\n      <Grid.Column width={5}>\n        <label style={{ color: token.isValid ? '#00FF00' : '#FF0000' }}>\n          {token.isValid ? 'Is valid' : 'Is not valid'}\n        </label>\n      </Grid.Column>\n      {/*      <Grid.Column width={4}>\n        <Button fluid content={'Check'}/>\n      </Grid.Column>*/}\n      <Grid.Column width={7}>\n        <Button fluid content={'Update'} onClick={()=>updateToken(token.id)}/>\n      </Grid.Column>\n    </Grid.Row>\n  );\n  return (\n    <>\n      <Segment>\n        <Accordion.Title\n          active={isActive}\n          index={client.id}\n          onClick={() => {\n            selectClient(isActive ? -1 : client.id);\n            if (isActive) {\n              return -1;\n            }\n            getToken(client.id);\n            return client.id;\n          }}\n        >\n          <Icon name=\"dropdown\" />\n          {client.name}\n        </Accordion.Title>\n        <Accordion.Content active={isActive}>\n          <Grid verticalAlign={'middle'}>\n            {fields.map(f => (\n              <FieldComponent key={f.key} field={f} />\n            ))}\n            {currentClientTokens.map(t=><Token key={t.id} token={t}/>)}\n            <Grid.Row>\n              <GridColumn width={8} textAlign={'center'}>\n                <Button icon={'add'} content={'Generate new token'} color={'green'} onClick={() => generateToken(client.id)} />\n              </GridColumn>\n              <GridColumn width={8} textAlign={'center'}>\n                <Button\n                  fluid\n                  icon={'trash alternate'}\n                  content={'Revoke all tokens'}\n                  color={'red'}\n                  onClick={() => false}\n                />\n              </GridColumn>\n            </Grid.Row>\n          </Grid>\n        </Accordion.Content>\n      </Segment>\n    </>\n  );\n};\n","import React, { FC } from 'react';\nimport {Account} from '../atoms/account';\nimport { useStore } from 'effector-react';\nimport { $clients } from '../model/settings.store';\nimport { Accordion } from 'semantic-ui-react';\nimport '../model/settings.model';\nimport { Client } from '../atoms/client';\n\nexport const ClientsPanel: FC = () => {\n  const clients = useStore($clients);\n  return (\n    <Accordion>\n      {clients.map(cl=><Client key={cl.id} client={cl}/>)}\n    </Accordion>\n  );\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React, { Component, FC, useEffect, useState } from 'react';\n/*import './App.css';*/\nimport 'semantic-ui-css/semantic.min.css';\n/*import { TemplatesPanelComponent } from './_templates/TemplatesPanelComponent'; // done*/\n/*import { HeaderPanel } from './header/HeaderPanel';\nimport { Settings } from './settings/Settings';\nimport { CampaignsPanel } from './campaigns/CampaignsPanel';\nimport { Account, Client } from './settings/accounts/AccountsPanel';\nimport { TemplatesPanelComponent } from './templates/TemplatesPanel.component';\nimport {Test} from './features/accounts/pages/Account'*/\nimport { Header } from './features/header/ogranisms/Header';\nimport { AccountsPanel } from './features/settings/molecules/accounts-panel';\nimport { loadAllAccounts, loadAllClients } from './features/settings/model/settings.events';\nimport { ClientsPanel } from './features/settings/molecules/clients-panel';\nconst App: FC<any> = () => {\n/*  const [client, setClient] = useState<Client>({name: ''});\n  const [account, setAccount] = useState<HeaderAccount>({});\n  const [activeTab, setActiveTab] = useState<number>(-1);\n  console.log(account.id!==void 0);\n  return (\n    <div>\n      <HeaderPanel\n        setClient={setClient}\n        setAccount={setAccount}\n        setActiveTab={setActiveTab}\n      />\n      {activeTab === 0 && client.id!== void 0 ? <TemplatesPanelComponent clientId={client.id}/> : null}\n{/!*      <TemplatesPanelComponent clientId={client.id}/>*!/}\n      {activeTab === 1 && client.id!== void 0 ? <CampaignsPanel clientId={client.id}/> : null}\n      {activeTab === 99 ? <Settings /> : null}\n    </div>\n  );*/\n  loadAllAccounts();\n  loadAllClients();\nreturn (\n  <>\n\n  <Header/>\n    <AccountsPanel/>\n    <ClientsPanel/>\n  </>\n)\n};\n\nexport { App as default, App };\n"],"sourceRoot":""}